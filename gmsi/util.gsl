// safe prefixes 1234567890PqQTxy

void InitNextCharacters() {
	for (int i = 0; i < strlen(permittedChars) - 1; i++) {
		nextChars[substr(permittedChars, i, i + 1)] = substr(permittedChars, i + 1, i + 2);
	}	

	nextChars["z"] = "0";
}

void InitHotkeys() {
	hotkeys[0]  = "Q";
	hotkeys[1]  = "W";
	hotkeys[2]  = "E";
	hotkeys[3]  = "R";
	hotkeys[4]  = "A";
	hotkeys[5]  = "S";
	hotkeys[6]  = "D";
	hotkeys[7]  = "F";
	hotkeys[8]  = "Z";
	hotkeys[9]  = "X";
	hotkeys[10] = "C";
	hotkeys[11] = "V";
}

void AddEID(string eId, string id) {
	if (extendedIds[eId] != null) {
		fail("Overlapping eId " + eId);
	}

	extendedIds[eId] = id;
	extendedIdsRev[id] = eId;
}

void GenerateEIDManifest() {
	write("\tpublic struct IdManifest[] {\n");
	write("\t\tstatic Table string2id;\n");
	write("\t\tstatic Table id2string;\n\n");

	write("\t\tstatic method getByString(string str) -> integer {\n");
	write("\t\t\treturn string2id[SH(str)];\n");
	write("\t\t}\n\n");

	write("\t\tstatic method getById(integer id) -> string {\n");
	write("\t\t\treturn id2string.string[id];\n");
	write("\t\t}\n\n");

	write("\t\tstatic method hasString(string str) -> boolean {\n");
	write("\t\t\treturn string2id.string.has(SH(str));\n");
	write("\t\t}\n\n");

	write("\t\tstatic method hasId(integer id) -> boolean {\n");
	write("\t\t\treturn id2string.has(id);\n");
	write("\t\t}\n\n");

	write("\t\tprivate static method register(integer id, string str) {\n");
	write("\t\t\tstring2id[SH(str)] = id;\n");
	write("\t\t\tid2string.string[id] = str;\n");
	write("\t\t}\n\n");

	int currentSegment = 1;
	int count = 0;
	int perSegment = 32;
	array queue = array();
	array lines = array();

	for (string id: extendedIdsRev) {
		queue[] = objectId2Int(id);
	}

	sortArray(queue);

	for (int i: queue) {
		string id = int2ObjectId(queue[i]);
		string eId = extendedIdsRev[id];

		lines[] = "\t\t\tregister('" + id + "', \"" + eId + "\");\n";
	}

	while (lines[] != null) {
		write("\t\tstatic method segment" + currentSegment + "() {\n");
		
		while (lines[] != null && count < perSegment) {
			write(lines[]);
			unset(lines[]);
			count++;
		}

		count = 0;
		write("\t\t}\n\n");
		currentSegment++;
	}

	write("\t\tprivate static method onInit() {\n");
	write("\t\t\tid2string = Table.create();\n");
	write("\t\t\tstring2id = Table.create();\n\n");

	for (int i = 1; i < currentSegment; i++) {
		write("\t\t\tsegment" + i + ".execute();\n");
	}

	write("\t\t}\n");
	write("\t}\n\n");
}

void GenerateModelManifest() {
	write("\tpublic struct ModelManifest[] {\n");
	write("\t\tstatic Table id2model;\n");

	write("\t\tstatic method getById(integer id) -> string {\n");
	write("\t\t\treturn id2model.string[id];\n");
	write("\t\t}\n\n");

	write("\t\tprivate static method register(integer id, string str) {\n");
	write("\t\t\tid2model.string[id] = str;\n");
	write("\t\t}\n\n");

	int currentSegment = 1;
	int count = 0;
	int perSegment = 64;
	array lines = array();
	array queue = array();

	for (string i: map.objects) {
		Wc3obj o = map.objects[i];

		if (o.typetostr == "Unit") {
			queue[] = objectId2Int(i);
		}
	}

	sortArray(queue);

	for (int i: queue) {
		string id = int2ObjectId(queue[i]);
		if (map.objects[id].file != null) {
			lines[] = "\t\t\tregister('" + id + "', \"" + map.objects[id].file + "\");\n";
		}
	}

	while (lines[] != null) {
		write("\t\tstatic method segment" + currentSegment + "() {\n");
		
		while (lines[] != null && count < perSegment) {
			write(lines[]);
			unset(lines[]);
			count++;
		}

		count = 0;
		write("\t\t}\n\n");
		currentSegment++;
	}

	write("\t\tprivate static method onInit() {\n");
	write("\t\t\tid2model = Table.create();\n");

	for (int i = 1; i < currentSegment; i++) {
		write("\t\t\tsegment" + i + ".execute();\n");
	}

	write("\t\t}\n");
	write("\t}\n\n");
}

void GenerateManifests() {
	Writer w = openFileWrite(@outputPath + "/yarp-eid-manifest.txt", false);

	write("library Manifests requires Util {\n");
	
	GenerateEIDManifest();
	GenerateModelManifest();

	write("}\n");
	closeFile(w);
}

string GetNextId(string id) {
	int pos = 3;
	array temp = array();
	bool carry = true;

	while (pos >= 0) {
		if (carry) {
			if (substr(id, pos, pos + 1) == "z") {
				temp[pos] = "0";
			} else {
				temp[pos] = nextChars[substr(id, pos, pos + 1)];
				carry = false;
			}
		} else {
			temp[pos] = substr(id, pos, pos + 1);
		}
		pos--;
	}

	return temp[0] + temp[1] + temp[2] + temp[3];
}

string MakeHotkeyTip(string hotkey) {
	return HOTKEY_COLOR + "[" + hotkey + "] |r";
}