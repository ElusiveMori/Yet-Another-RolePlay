library Logs requires Util, Constants {
	public struct Log[] {
		public {
			static string logs[];
			static string names[];
			static integer talkers[];
			static integer totals[];
		}

		static method getMessage(integer logType, integer number) -> string {
			debug Assert(logType < 3 && logType >= 0,  "Log.getMessage", "Invalid log type.");
			debug Assert(number >= 0 && number < LINES_PER_LOG, "Log.getMessage", "Invalid message id.");

			return logs[logType * LINES_PER_LOG + number];
		}

		static method getTalker(integer logType, integer number) -> integer {
			debug Assert(logType < 3 && logType >= 0,  "Log.getTalker", "Invalid log type.");
			debug Assert(number >= 0 && number < LINES_PER_LOG, "Log.getTalker", "Invalid message id.");

			return talkers[logType * LINES_PER_LOG + number];
		}

		static method getName(integer number) -> string {
			debug Assert(number >= 0 && number < LINES_PER_LOG, "Log.getName", "Invalid message id.");
			
			return names[number];
		}

		static method shiftMessage(integer logType) {
			integer i;
			integer offset = logType * LINES_PER_LOG;

			debug Assert(logType < 3 && logType >= 0,  "Log.shiftMessage", "Invalid log type.");

			for (offset + LINES_PER_LOG - 2 >= i >= offset) {
				logs[i+1] = logs[i];
			}

			totals[logType] = totals[logType] + 1;
		}

		static method shiftTalker(integer logType) {
			integer i;
			integer offset = logType * LINES_PER_LOG;

			debug Assert(logType < 3 && logType >= 0,  "Log.shiftTalker", "Invalid log type.");

			for (offset + LINES_PER_LOG - 2 >= i >= offset) {
				talkers[i+1] = talkers[i];
			}
		}

		static method shiftNames() {
			integer i;

			for (LINES_PER_LOG - 2 >= i >= 0) {
				names[i+1] = names[i];
			}
		}

		static method log(integer talker, integer logType, string message) {
			debug Assert(logType < 3 && logType >= 0,  "Log.log", "Invalid log type.");
			debug Assert(talker < bj_MAX_PLAYERS && talker >= 0,    "Log.log", "Invalid player ID.");

			shiftMessage.execute(logType);
			shiftTalker.execute(logType);

			logs[logType * LINES_PER_LOG] = message;
			talkers[logType * LINES_PER_LOG] = talker;
		}

		static method logName(string name) {
			shiftNames.execute();

			names[0] = name;
		}
	}

	public struct LogBoard[] {
		private {
			static constant integer rowCount = 24;
			static constant integer nameLength = 25;
			static constant integer messageLength = 60;

			static Board boards[];
			static integer offsets[];
			static integer logTypes[];
		}

		static method setActiveLogType(integer who, integer logType) {
			debug Assert(logType < 3 && logType >= -1,  "LogBoard.setActiveLogType", "Invalid log type.");
			debug Assert(who < bj_MAX_PLAYERS && who >= 0,          "LogBoard.setActiveLogType", "Invalid player ID.");

			logTypes[who] = logType;
		}

		static method setLogScroll(integer who, integer scroll) {
			debug Assert(who < bj_MAX_PLAYERS && who >= 0, "LogBoard.setLogScroll", "Invalid player ID.");

			if (scroll > 2047) scroll = 2047;
			if (scroll < 0) scroll = 0;

			offsets[who] = scroll;
		}

		/* this is really convoluted
		/  I'm not even going to bother
		/  putting asserts in here because
		/  it just works as it is */
		static method updateBoardSingle(integer id) {
			integer curRow;
			integer curMsg;
			integer i, j;
			integer msgLines;
			integer nameLines;
			integer logType;
			string message;
			string name;
			Board board;

			curMsg = offsets[id];
			curRow = rowCount - 1;
			logType = logTypes[id];
			board = boards[id];

			if (logType >= 0) {
				board.all.text = "";

				while (curRow >= 0 && curMsg < Log.totals[logType]) {
					message = Log.getMessage(logType, curMsg);

					if (logType == TYPE_IC) {
						name = Log.getName(curMsg);
					} else {
						name = GetPlayerName(Player(Log.getTalker(logType, curMsg)));
					}

					msgLines = ((StringLength(message)) / messageLength) + 1;
					nameLines = ((StringLength(name)) / nameLength) + 1;

					if (msgLines > nameLines) j = msgLines; else j = nameLines;
					if (j > curRow + 1) return;

					board[0][curRow - j + 1].text = I2S(Log.totals[logType] - curMsg);
					board[0][curRow - j + 1].color = ARGB.create(255, 101, 72, 182);

					for (0 <= i < nameLines) {
						board[1][curRow - j + 1 + i].text = SubString(name, i * nameLength, (i + 1) * nameLength);
						board[1][curRow - j + 1 + i].color = ARGB.fromPlayer(Player(Log.getTalker(logType, curMsg)));
					}

					for (0 <= i < msgLines) {
						board[2][curRow - j + 1 + i].text = SubString(message, i * messageLength, (i + 1) * messageLength);
					}

					curRow = curRow - j;
					curMsg = curMsg + 1;
				}

				board.visible[Player(id)] = true;
			} else {
				board.visible[Player(id)] = false;
			}
		}

		static method updateBoard() {
			integer id;

			for (0 <= id < bj_MAX_PLAYERS) {
				updateBoardSingle.execute(id);
			}
		}

		private static method onChat() {
			TriggerSleepAction(0.0);
			updateBoard();
		}

		private static method onInit() {
			trigger chatTrigger = CreateTrigger();
			integer i, j;
			TriggerAddAction(chatTrigger, function thistype.onChat);

			for (0 <= i < bj_MAX_PLAYERS)
				TriggerRegisterPlayerChatEvent(chatTrigger, Player(i), "", false);

			chatTrigger = null;

			TriggerSleepAction(0);

			for (0 <= i < bj_MAX_PLAYERS) {
				offsets[i] = 0;
				logTypes[i] = -1;
				boards[i] = Board.create();
				boards[i].title = "Log";
				boards[i].row.count = rowCount - 1;
				boards[i].col[0].width = 0.02;
				boards[i].col[1].width = 0.1;
				boards[i].col[2].width = 0.3;
				boards[i].col[0].setDisplay(true, false);
				boards[i].col[1].setDisplay(true, false);
				boards[i].col[2].setDisplay(true, false);

				boards[i].visible = false;
			}

			updateBoard();
		}
	}

	public function MessageOOC(integer who, string message) {
		debug Assert(who < bj_MAX_PLAYERS && who >= 0, "MessageOOC", "Invalid player ID.");

		SimpleMessage("|c00b65949OOC >>|r " + PlayerName(who) + ": " + message);
		Log.log(who, TYPE_OOC, message);
	}

	public function MessageIC(integer who, string name, string message) {
		debug Assert(who < bj_MAX_PLAYERS && who >= 0, "MessageIC", "Invalid player ID.");

		SimpleMessage(PColorStr(name, who) + " " + message);
		Log.log(who, TYPE_IC, message);
		Log.logName(name);        
	}
}