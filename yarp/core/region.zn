library Region requires Util, Logs, Constants {
	// behold the horrible spaghetti code

	struct RegionHighlighter[] {
		module Alloc;

		private {
			static Table decayers;

			lightning l1;
			lightning l2;
			lightning l3;
			lightning l4;
			integer target;
		}

		private static method decay() {
			timer expired = GetExpiredTimer();
			thistype this = decayers[GetHandleId(expired)];

			if (IsLocalPlayer(target)) {
				DestroyLightning(l1);
				DestroyLightning(l2);
				DestroyLightning(l3);
				DestroyLightning(l4);
			}

			deallocate();
			decayers.remove(GetHandleId(expired));
			DestroyTimer(expired);
			expired = null;
		}

		static method create(integer who, real minx, real miny, real maxx, real maxy, real duration) -> thistype {
			thistype this = allocate();
			timer decayer = CreateTimer();
			target = who;

			if (IsLocalPlayer(who)) {
				l1 = AddLightning("DRAM", false, minx, miny, minx, maxy);
				l2 = AddLightning("DRAM", false, minx, maxy, maxx, maxy);
				l3 = AddLightning("DRAM", false, maxx, maxy, maxx, miny);
				l4 = AddLightning("DRAM", false, maxx, miny, minx, miny);

				PingMinimapEx(minx, miny, duration, 255, 120, 120, false);
				PingMinimapEx(minx, maxy, duration, 255, 120, 120, false);
				PingMinimapEx(maxx, miny, duration, 255, 120, 120, false);
				PingMinimapEx(maxx, maxy, duration, 255, 120, 120, false);
			}

			decayers[GetHandleId(decayer)] = this;
			TimerStart(decayer, duration, false, function thistype.decay);
			decayer = null;
			return this;
		}

		private static method onInit() {
			decayers = Table.create();
		}
	}

	public struct RegionController[] {
		//! runtextmacro AIDS_zinc()

		integer owner;
		integer rectId;
		weathereffect weather;
		integer weatherId;

		boolean enabledDNC;
		string terrainDNC;
		string unitDNC;

		boolean fogEnabled;
		real fogZstart;
		real fogZend;
		real fogRed;
		real fogGreen;
		real fogBlue;

		static thistype currentDNC = 0;
		static thistype currentFog = 0;

		method operator rectangle() -> rect {
			return Region.rectangles[owner][rectId];
		}

		method setFog(boolean enabled, real start, real end, real red, real green, real blue) {
			fogEnabled = enabled;
			fogZstart  = start;
			fogZend    = end;
			fogRed     = red;
			fogGreen   = green;
			fogBlue    = blue;
		}

		method setDNC(boolean enabled, string newTerrainDNC, string newUnitDNC) {
			enabledDNC = enabled;

			if (Listing.terrainDNC.string.has(SH(newTerrainDNC))) {
				terrainDNC = Listing.terrainDNC.string[SH(newTerrainDNC)];
			} else {
				terrainDNC = "";
			}

			if (Listing.unitDNC.string.has(SH(newUnitDNC))) {
				unitDNC = Listing.unitDNC.string[SH(newUnitDNC)];
			} else {
				unitDNC = "";
			}
		}

		method setWeather(string str) {
			integer id;

			removeWeather();

			if (Listing.weather.has(SH(str))) {
				id = Listing.weather[SH(str)];

				weather = AddWeatherEffect(rectangle, id);
				EnableWeatherEffect(weather, true);
				weatherId = id;
			}
		}

		method removeWeather() {
			if (weatherId > 0) {
				RemoveWeatherEffect(weather);
				weatherId = 0;
			}
		}

		method refreshWeather() {
			if (weatherId > 0) {
				RemoveWeatherEffect(weather);
				weather = AddWeatherEffect(rectangle, weatherId);
				EnableWeatherEffect(weather, true);
			}
		}

		method alignToGrid() {
			real x = GetUnitX(unit);
			real y = GetUnitY(unit);

			SetUnitX(unit, GetTileCenterCoordinate(x));
			SetUnitY(unit, GetTileCenterCoordinate(y));

			IssueImmediateOrder(unit, "stop");
		}

		private static method AIDS_filter(unit what) -> boolean {
			return GetUnitTypeId(what) == REGION_ID;
		}

		private method AIDS_onCreate() {
			integer who = GetPlayerId(GetOwningPlayer(unit));
			real x = GetUnitX(unit);
			real y = GetUnitY(unit);
			integer i;

			for (0 <= i <= 15) {
				if (Region.rectangleControllers[who][i] == 0) {
					Region.rectangleControllers[who][i] = this;
					alignToGrid();
					x = GetUnitX(unit);
					y = GetUnitY(unit);
					SetRect(Region.rectangles[who][i], x - 64, y - 64, x + 64, y + 64);
					rectId = i;
					owner = who;

					enabledDNC = false;
					fogEnabled = false;

					SetUnitColor(unit, ConvertPlayerColor(bj_PLAYER_NEUTRAL_EXTRA));
					if (IsLocalPlayer(who)) {
						SetUnitVertexColor(unit, 255, 255, 255, 100);
					} else {
						SetUnitVertexColor(unit, 255, 255, 255, 0);
					}

					SetUnitPropWindow(unit, 0);

					return;
				}
			}

			RemoveUnit(unit);
		}

		private method AIDS_onDestroy() {
			Region.rectangleControllers[owner][rectId] = 0;
			removeWeather();
		}
	}

	// this struct is just for callbacks and timers
	struct Region[] {
		static rect rectangles[24][16];
		static integer rectangleControllers[24][16];

		private static method onCast() {
			integer spellId = GetSpellAbilityId();
			unit caster = GetTriggerUnit();
			integer owner = GetPlayerId(GetOwningPlayer(caster));
			rect temp;
			real x, y;
			CommandThread thread;

			if (GetUnitTypeId(caster) == REGION_ID) {
				x = GetUnitX(caster);
				y = GetUnitY(caster);
				temp = RegionController[caster].rectangle;

				if (spellId == REGION_ABIL_INC_WIDTH) {
					SetRect(temp, GetRectMinX(temp), GetRectMinY(temp), GetRectMaxX(temp) + 256, GetRectMaxY(temp));
					MoveRectTo(temp, x, y);
					RegionController[caster].refreshWeather();
				} else if (spellId == REGION_ABIL_DEC_WIDTH) {
					SetRect(temp, GetRectMinX(temp), GetRectMinY(temp), GetRectMaxX(temp) - 256, GetRectMaxY(temp));
					MoveRectTo(temp, x, y);
					RegionController[caster].refreshWeather();
				} else if (spellId == REGION_ABIL_INC_HEIGHT) {
					SetRect(temp, GetRectMinX(temp), GetRectMinY(temp), GetRectMaxX(temp), GetRectMaxY(temp) + 256);
					MoveRectTo(temp, x, y);
					RegionController[caster].refreshWeather();
				} else if (spellId == REGION_ABIL_DEC_HEIGHT) {
					SetRect(temp, GetRectMinX(temp), GetRectMinY(temp), GetRectMaxX(temp), GetRectMaxY(temp) - 256);
					MoveRectTo(temp, x, y);
					RegionController[caster].refreshWeather();
				} else if (spellId == REGION_ABIL_REMOVE) {
					RemoveUnit(caster);
				}
			}

			caster = null;
		}

		private static method onOrder() {
			unit ordered = GetOrderedUnit();
			string order = OrderId2String(GetIssuedOrderId());
			eventid id = GetTriggerEventId();
			real sx, sy;
			real x, y;
			RegionController controller;

			if (GetUnitTypeId(ordered) == REGION_ID) {
				if (id == EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) {
					if (order == "smart" || order == "move") {
						SetUnitX(ordered, GetOrderPointX());
						SetUnitY(ordered, GetOrderPointY());
						controller = RegionController[ordered];
						controller.refreshWeather();
						controller.alignToGrid();
						MoveRectTo(controller.rectangle, GetUnitX(ordered), GetUnitY(ordered));
					} else {
						IssueImmediateOrder(ordered, "stop");
					}
				} else if (id == EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER) {	
					IssueImmediateOrder(ordered, "stop");
				}
			}

			ordered = null; 
		}

		private static method highlightRegions() {
			timer expired = GetExpiredTimer();
			group temp;
			unit fog;
			rect rectangle;
			integer i;

			for (0 <= i < bj_MAX_PLAYERS) {
				temp = NewGroup();
				GroupEnumUnitsSelected(temp, Player(i), null);

				fog = FirstOfGroup(temp);

				while (fog != null) {
					GroupRemoveUnit(temp, fog);

					if (GetUnitTypeId(fog) == REGION_ID) {
						rectangle = RegionController[fog].rectangle;

						RegionHighlighter.create(i, GetRectMinX(rectangle), GetRectMinY(rectangle), GetRectMaxX(rectangle), GetRectMaxY(rectangle), 0.125);
						rectangle = null;
					}

					fog = FirstOfGroup(temp);
				}

				ReleaseGroup(temp);
			}

			temp = null;
			fog = null;
			TimerStart(expired, 0.125, false, function thistype.highlightRegions);
			expired = null;
		}

		private static method applyAtmospheric() {
			timer expired = GetExpiredTimer();
			rect rectangle;
			real margin = GetCameraEyePositionZ() / 4;
			RegionController controller;
			real x = GetCameraTargetPositionX();
			real y = GetCameraTargetPositionY();
			integer i, j;
			boolean DNCHit = false;
			boolean fogHit = false;

			for (0 <= i < bj_MAX_PLAYERS) {
				for (0 <= j < 16) {
					controller = rectangleControllers[i][j];
					if (controller > 0) {
						rectangle = controller.rectangle;

						if (controller.fogEnabled || controller.enabledDNC) {
							if (x > GetRectMinX(rectangle) - margin && x < GetRectMaxX(rectangle) + margin &&
								y > GetRectMinY(rectangle) - margin && y < GetRectMaxY(rectangle) + margin) {

								if (controller.fogEnabled && !fogHit) {
									fogHit = true;
									SetTerrainFogEx(0, controller.fogZstart, controller.fogZend, 0, controller.fogRed, controller.fogGreen, controller.fogBlue);
								}

								if (controller.enabledDNC && !DNCHit) {
									DNCHit = true;
									SetDayNightModels(controller.terrainDNC, controller.unitDNC);
								}
							}

							if (fogHit && DNCHit) break;
						}
					}
				}

				if (fogHit && DNCHit) {
					break;
				}
			}

			if (!fogHit) {
				SetTerrainFogEx(0, 100000, 100000, 0, 0, 0, 0);
			}

			if (!DNCHit) {
				SetDayNightModels("Environment\\DNC\\DNCAshenvale\\DNCAshenValeTerrain\\DNCAshenValeTerrain.mdl", "Environment\\DNC\\DNCAshenvale\\DNCAshenvaleUnit\\DNCAshenvaleUnit.mdl");
			}

			TimerStart(expired, 0.125, false, function thistype.applyAtmospheric);
			expired = null;
			rectangle = null;
		}

		private static method onInit() {
			trigger orderTrigger = CreateTrigger();
			trigger castTrigger = CreateTrigger();
			integer i, j;
			timer highlighter = CreateTimer();
			timer atmospheric = CreateTimer();

			TimerStart(highlighter, 0.125, false, function thistype.highlightRegions);
			TimerStart(atmospheric, 0.125, false, function thistype.applyAtmospheric);
			highlighter = null;
			atmospheric = null;

			TriggerAddAction(orderTrigger, function thistype.onOrder);
			TriggerAddAction(castTrigger, function thistype.onCast);
			TriggerRegisterAnyUnitEventBJ(orderTrigger, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER);
			TriggerRegisterAnyUnitEventBJ(orderTrigger, EVENT_PLAYER_UNIT_ISSUED_ORDER);
			TriggerRegisterAnyUnitEventBJ(orderTrigger, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER);
			TriggerRegisterAnyUnitEventBJ(castTrigger, EVENT_PLAYER_UNIT_SPELL_CAST);
			
			for (0 <= i < bj_MAX_PLAYERS)
				for (0 <= j < 16) {
					rectangles[i][j] = Rect(0, 0, 0, 0);
					rectangleControllers[i][j] = 0;
				}

			orderTrigger = null;
			castTrigger = null;
		}
	}
}