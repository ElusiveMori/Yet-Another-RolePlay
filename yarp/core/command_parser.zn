library CommandParser requires Alloc, Util {
	// common parser template
	module Parser {
		module Alloc;

		string input;
		integer pos;

		method operator [](integer i) -> string {
			return SubString(input, i, i+1);
		}

		method isFinished() -> boolean {
			return pos >= StringLength(input);
		}

		method restParsed() -> string {
			string result = "";

			while (!isFinished()) {
				result = result + next();

				if (!isFinished())
					result = result + " ";
			}
			
			return result;
		}

		method restSimple() -> string {
			integer temp = pos;
			pos = StringLength(input);

			return SubString(input, temp, StringLength(input));
		}

		static method create(string toParse) -> thistype {
			thistype this = allocate();
			pos = 0;
			input = toParse;

			return this;
		}

		method destroy() {
			deallocate();
		}
	}

	// this parser splits the command based on pipes (|)
	// while ignoring escaped pipes (quoted or prefixed by backslash (\))
	public struct CommandSplitter[] {
		module Parser;

		method next() -> string {
			integer depth = 0;
			boolean skip = false;
			string str = input;
			string arg = "";
			string char;

			while (pos < StringLength(input)) {
				char = this[pos];

				if (skip) {
					skip = false;
					pos = pos + 1;
				} else if (char == "\\") {
					arg = arg + this[pos + 1];
					skip = true;
					pos = pos + 1;
				} else if (char == "]" && depth > 0) {
					pos = pos + 1;
					depth = depth - 1;
					arg = arg + char;
				} else if (char == "[") {
					arg = arg + char;
					depth = depth + 1;
					pos = pos + 1;
				} else if (char == "|" && depth == 0) {
					pos = pos + 1;
					return arg;
				} else {
					pos = pos + 1;
					arg = arg + char;
				}
			}

			return arg;
		}
	}

	// this parser splits the command based on whitespaces && square brackets which are used as quotation marks
	public struct ArgumentSplitter[] {
		module Parser;

		method next() -> string {
			integer depth = 0;
			boolean skip = false;
			string arg = "";
			string char;

			while (pos < StringLength(input)) {
				char = this[pos];

				if (skip) {
					skip = false;
					pos = pos + 1;
				} else if (char == "\\") {
					arg = arg + this[pos + 1];
					skip = true;
					pos = pos + 1;
				} else if (char == "]" && depth > 0) {
					pos = pos + 1;
					depth = depth - 1;

					if (depth == 0)
						return arg;
					else
						arg = arg + char;
				} else if (char == "[") {
					if (depth == 0 && arg != "")
						return arg;

					if (depth > 0)
						arg = arg + char;

					depth = depth + 1;
					pos = pos + 1;
				} else if (char == " " && depth == 0) {
					if (StringLength(arg) > 0) {
						pos = pos + 1;
						return arg;
					} else
						pos = pos + 1;
				} else {
					pos = pos + 1;
					arg = arg + char;
				}
			}

			return arg;
		}
	}

	public struct SpaceSplitter[] {
		module Parser;

		method next() -> string {
			integer start = pos;
			string char;

			while (pos < StringLength(input)) {
				char = this[pos];

				if (char == " ") {
					pos = pos + 1;
					return Sub(input, start, pos - 1);
				} else {
					pos = pos + 1;
				}
			}

			return Sub(input, start, pos);
		}
	}
}