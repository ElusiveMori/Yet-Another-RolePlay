library Selection requires Util {
	public struct Selection[] {
		module Alloc;

		private group m_group;

		private static Selection s_this;
		private real m_originX;
		private real m_originY;
		private integer m_count;

		static method create() -> thistype {
			thistype this = allocate();

			m_group = NewGroup();

			return this;
		}

		method destroy() {
			ReleaseGroup(m_group);
			deallocate();
		}

		method addUnit(unit what) {
			debug Assert(what != null, "Selection.addUnit", "Invalid unit.");

			GroupAddUnit(m_group, what);
		}

		method removeUnit(unit what) {
			debug Assert(what != null, "Selection.removeUnit", "Invalid unit.");

			GroupRemoveUnit(m_group, what);
		}

		method fromPlayer(integer who) {
			debug Assert(who >= 0 && who < 12, "Selection.fromPlayer", "Invalid player ID.");

			GroupEnumUnitsSelected(m_group, P(who), null);
		}

		method fromGroup(group what) {
			debug Assert(what != null, "Selection.fromGroup", "Invalid new group.");

			GroupAddGroup(m_group, what);
		}

		method clear() {
			GroupClear(m_group);
		}

		private static method calcOrigin_aux() {
			unit what = GetEnumUnit();

			s_this.m_originX = s_this.m_originX + GetUnitX(what);
			s_this.m_originY = s_this.m_originY + GetUnitY(what);
			s_this.m_count = s_this.m_count + 1;
		}

		method calcOrigin() {
			s_this = this;

			m_originX = 0;
			m_originY = 0;
			m_count = 0;

			ForGroup(m_group, function thistype.calcOrigin_aux);

			m_originX = m_originX / I2R(m_count);
			m_originY = m_originY / I2R(m_count);
		}

		method getOriginX() -> real {
			return m_originX;
		}

		method getOriginY() -> real {
			return m_originY;
		}

		method getCount() -> integer {
			return m_count;
		}

		method copy() -> thistype {
			thistype ret = create();

			GroupAddGroup(ret.getGroup(), m_group);

			return ret;
		}

		method getGroup() -> group {
			return m_group;
		}

		method run(code func) {
			ForGroup(m_group, func);
		}
	}
}