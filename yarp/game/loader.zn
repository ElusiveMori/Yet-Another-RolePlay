library Loader requires Core {
	struct Loader[] {
		private static real s_x;
		private static real s_y;

		private static method Command_LoadAddQueueUnit(CommandThread thread) {
			LoadQueue queue = Load.addToQueue(thread.owner);
			string str = thread.args.next();

			if (IdManifest.hasString(str)) {
				queue.id = IdManifest.getByString(str);
			} else {
				queue.id = String2Id(str);
			}

			queue.objectType = 0;
			queue.x          = S2R(thread.args.next());
			queue.y          = S2R(thread.args.next());
			queue.angle      = S2R(thread.args.next());
			queue.size       = S2R(thread.args.next());
			queue.speed      = S2R(thread.args.next());
			queue.animSpeed  = S2R(thread.args.next());
			queue.z          = S2R(thread.args.next());
			queue.color      = S2I(thread.args.next());
			queue.vertexR    = S2I(thread.args.next());
			queue.vertexG    = S2I(thread.args.next());
			queue.vertexB    = S2I(thread.args.next());
			queue.vertexA    = S2I(thread.args.next());
			queue.paused     = I2B(S2I(thread.args.next()));
		}

		private static method Command_LoadAddQueueTile(CommandThread thread) {
			LoadQueue queue = Load.addToQueue(thread.owner);

			queue.objectType = 1;
			queue.x          = S2R(thread.args.next()) * 128;
			queue.y          = S2R(thread.args.next()) * 128;
			queue.id         = String2Id(thread.args.next());
		}

		private static method Command_LoadAddQueueDeform(CommandThread thread) {
			LoadQueue queue = Load.addToQueue(thread.owner);

			queue.objectType = 2;
			queue.x          = S2R(thread.args.next());
			queue.y          = S2R(thread.args.next());
			queue.magnitude  = S2R(thread.args.next());
			queue.radius     = S2R(thread.args.next());
		}

		private static method Command_LoadClearQueue(CommandThread thread) {
			Load.clearQueue(thread.owner);
		}

		private static method Command_LoadStartPaste(CommandThread thread) {
			Load.startPaste(thread.owner);
		}

		private static method Command_LoadSetOffset_aux() {
			unit what = GetEnumUnit();

			if (GetUnitTypeId(what) == REGION_ID) {
				s_x = GetUnitX(what);
				s_y = GetUnitY(what);
			}
		}

		private static method Command_LoadSetOffset(CommandThread thread) {
			s_x = S2R(thread.args.next());
			s_y = S2R(thread.args.next());

			thread.selection.run(function thistype.Command_LoadSetOffset_aux);

			Load.setOffset(thread.owner, s_x, s_y);
		}

		private static method onInit() {
			Command.register("_au", thistype.Command_LoadAddQueueUnit,   CMD_DIRECT);
			Command.register("_at", thistype.Command_LoadAddQueueTile,   CMD_DIRECT);
			Command.register("_ad", thistype.Command_LoadAddQueueDeform, CMD_DIRECT);
			Command.register("_cq", thistype.Command_LoadClearQueue,     CMD_DIRECT);
			Command.register("_sp", thistype.Command_LoadStartPaste,     CMD_DIRECT);
			Command.register("_so", thistype.Command_LoadSetOffset,      CMD_DIRECT);
		}
	}
}