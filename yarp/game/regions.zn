library Regions requires Core {
	struct Regions[] {
		private static CommandThread s_thread;
		private static unit s_unit;

		private static boolean s_bool;
		private static real s_real1;
		private static real s_real2;
		private static real s_real3;
		private static real s_real4;
		private static real s_real5;

		private static string s_string;

		private static method Command_CreateRegion(CommandThread thread) {
			unit spawner = Spawner.get(thread.owner);
			unit loc = CreateUnit(P(thread.owner), REGION_ID, GetUnitX(spawner), GetUnitY(spawner), 270);

			SetUnitColor(loc, ConvertPlayerColor(12));
			if (IsLocalPlayer(thread.owner)) {
				SetUnitVertexColor(loc, 255, 255, 255, 100);
			} else {
				SetUnitVertexColor(loc, 255, 255, 255, 0);
			}

			loc = null;
			spawner = null;
		}

		private static method Command_SaveRegion_aux() {
			unit what = GetEnumUnit();

			if (s_unit == null && PID(GetOwningPlayer(what)) == s_thread.owner && GetUnitTypeId(what) == REGION_ID) {
				s_unit = what;
			}
		}

		private static method Command_SaveRegion(CommandThread thread) {
			string filename = thread.args.restSimple();

			if (SL(filename) == 0) {
				MessageTo(thread.owner, "Invalid file name.");
				return;
			}

			if (IsLocalPlayer(thread.owner)) {
				s_thread = thread;
				s_unit = null;
				thread.selection.run(function thistype.Command_SaveRegion_aux);

				if (s_unit == null) {
					Message("You must select a Location Specifier!");
					return;
				}

				Save.save(thread.owner, RegionController[s_unit].rectangle, filename);
			}
		}

		private static method Command_FogRegion_aux() {
			unit what = GetEnumUnit();

			if (PID(GetOwningPlayer(what)) == s_thread.owner && GetUnitTypeId(what) == REGION_ID) {
				RegionController[what].setFog(s_bool, s_real1, s_real2, s_real3, s_real4, s_real5);
			}
		}

		private static method Command_FogRegion(CommandThread thread) {
			string first = thread.args.next();
			s_bool = (first != "off");
			s_real1 = S2R(first);
			s_real2 = S2R(thread.args.next());
			s_real3 = S2R(thread.args.next());
			s_real4 = S2R(thread.args.next());
			s_real5 = S2R(thread.args.next());
			s_thread = thread;

			thread.selection.run(function thistype.Command_FogRegion_aux);
		}

		private static method Command_LightingRegion_aux() {
			unit what = GetEnumUnit();

			if (PID(GetOwningPlayer(what)) == s_thread.owner && GetUnitTypeId(what) == REGION_ID) {
				RegionController[what].setDNC(s_bool, s_string, s_string);
			}
		}

		private static method Command_LightingRegion(CommandThread thread) {
			s_string = thread.args.next();
			s_bool = (s_string != "off");
			s_thread = thread;

			thread.selection.run(function thistype.Command_LightingRegion_aux);
		}

		private static method Command_WeatherRegion_aux() {
			unit what = GetEnumUnit();

			if (PID(GetOwningPlayer(what)) == s_thread.owner && GetUnitTypeId(what) == REGION_ID) {
				if (s_bool) {
					RegionController[what].setWeather(s_string);
				} else {
					RegionController[what].removeWeather();			
				}
			}
		}

		private static method Command_WeatherRegion(CommandThread thread) {
			s_string = thread.args.next();
			s_bool = (s_string != "off");
			s_thread = thread;

			thread.selection.run(function thistype.Command_WeatherRegion_aux);
		}

		private static method onInit() {
			Command.register("region"  , thistype.Command_CreateRegion);
			Command.register("save"    , thistype.Command_SaveRegion);
			Command.register("fog"     , thistype.Command_FogRegion);
			Command.register("lighting", thistype.Command_LightingRegion);
			Command.register("weather" , thistype.Command_WeatherRegion);
		}
	}
	
}