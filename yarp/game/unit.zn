library Unit requires Core {
	//! textmacro CommandHeader takes CMD_NAME
		private static method $CMD_NAME$(CommandThread thread) {
	//! endtextmacro

	//! textmacro CommandStart takes CMD_NAME
			s_thread = thread;
			thread.selection.run(function thistype.$CMD_NAME$_aux);
		}

		private static method $CMD_NAME$_aux() {
			unit what = GetEnumUnit();
			UnitData unitData;

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				unitData = UnitData[what];
	//! endtextmacro

	//! textmacro CommandEnd
			}

			what = null;
		}
	//! endtextmacro

	struct Unit[] {
		private static CommandThread s_thread;
		private static real s_real1;
		private static real s_real2;
		private static integer s_int;
		private static integer s_r;
		private static integer s_g;
		private static integer s_b;
		private static integer s_a;
		private static boolean s_bool;
		private static string s_string1;
		private static string s_string2;
		private static playercolor s_color;

		private static method Command_UnitRemove_aux() {
			unit what = GetEnumUnit();

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				RemoveUnit(what);
			}

			what = null;
		}

		private static method Command_UnitRemove(CommandThread thread) {
			string command = thread.args.next();
			boolean valid  = true;
			integer target = -1;
			s_thread = thread;

			if (StringLength(command) == 0) {
			} else if (command == "me") {
				thread.selection.clear();
				GroupEnumUnitsOfPlayer(thread.selection.getGroup(), P(thread.owner), null);
			} else {
				target = PlayerIdFromString(command);

				if (target >= 0) {
					thread.selection.clear();
					GroupEnumUnitsOfPlayer(thread.selection.getGroup(), P(target), null);
				} else {
					valid = false;
				}
			}

			thread.selection.run(function thistype.Command_UnitRemove_aux);
		}

		private static method Command_UnitGive_aux() {
			unit what = GetEnumUnit();
			UnitData unitData;

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				unitData = UnitData[what];

				if (unitData.realOwner == s_thread.owner) {
					if (s_bool) {
						unitData.realOwner = s_int;
					}

					unitData.currentOwner = s_int;
				}
			}

			what = null;
		}

		private static method Command_UnitGive(CommandThread thread) {
			string targetName = thread.args.restSimple();
			s_int = -1;
			s_thread = thread;

			if (targetName == "me") {
				s_int = thread.owner;
			} else {
				s_int = PlayerIdFromString(targetName);
			}

			if (s_int < 0) return;
			s_bool = (s_int < 12);

			thread.selection.run(function thistype.Command_UnitGive_aux);
		}

		private static method Command_UnitGiveForce_aux() {
			unit what = GetEnumUnit();
			UnitData unitData;

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				unitData = UnitData[what];

				if (s_bool) {
					unitData.realOwner = s_int;
				}

				unitData.currentOwner = s_int;
			}

			what = null;
		}

		private static method Command_UnitGiveForce(CommandThread thread) {
			string targetName = thread.args.restSimple();
			s_int = -1;
			s_thread = thread;

			if (targetName == "me") {
				s_int = thread.owner;
			} else {
				s_int = PlayerIdFromString(targetName);
			}

			if (s_int < 0) return;
			s_bool = (s_int < 12);

			thread.selection.run(function thistype.Command_UnitGiveForce_aux);
		}

		private static method Command_UnitStep_aux() {
			unit what = GetEnumUnit();
			CommandThread thread;

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				thread = CommandThread.create(s_thread.owner, CMDF_EXEC);
				thread.selection.addUnit(what);
				thread.pushCommands("repeat " + I2S(s_int) + " " + s_string1);
				thread.start.execute();

				s_int = s_int + 1;
			}

			what = null;
		}

		private static method Command_UnitStep(CommandThread thread) {
			s_string1 = thread.args.restParsed();
			s_int = 0;
			s_thread = thread;

			thread.selection.run(function thistype.Command_UnitStep_aux);
		}

		private static method Command_UnitAbility_aux_add() {
			unit what = GetEnumUnit();
			integer id = String2Id(s_string1);

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				// handle some special cases first
				if (s_string1 == "waygate") {
					UnitAddAbility(what, WAYGATE_PASSIVE);
					UnitAddAbility(what, WAYGATE_TARGET);
				} else {
					UnitAddAbility(what, id);
				}
			}

			what = null;
		}

		private static method Command_UnitAbility_aux_rem() {
			unit what = GetEnumUnit();
			integer id = String2Id(s_string1);

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				// handle some special cases first
				if (s_string1 == "waygate") {
					UnitRemoveAbility(what, WAYGATE_PASSIVE);
					UnitRemoveAbility(what, WAYGATE_TARGET);
				} else {
					UnitRemoveAbility(what, id);
				}
			}

			what = null;
		}

		private static method Command_UnitAbility(CommandThread thread) {
			string str = thread.args.next();
			s_string1 = thread.args.next();
			s_thread = thread;

			if (str == "add") {
				thread.selection.run(function thistype.Command_UnitAbility_aux_add);
			} else if (str == "remove") {
				thread.selection.run(function thistype.Command_UnitAbility_aux_rem);
			}
		}

		private static method Command_UnitGlobal(CommandThread thread) {
			string targetName = thread.args.next();
			string command = thread.args.restParsed();
			CommandThread newThread;
			integer target;

			if (targetName == "me") {
				target = thread.owner;
			} else {
				target = PlayerIdFromString(targetName);
			}

			if (target < 0) return;

			newThread = CommandThread.create(thread.owner, CMDF_EXTEND);
			GroupEnumUnitsOfPlayer(newThread.selection.getGroup(), P(target), null);
			newThread.pushCommands(command);
			newThread.start.execute();
		}

		private static method Command_UnitRunGroup_filter() -> boolean {
			unit what = GetFilterUnit();

			return HasPlayerUnitAccess(s_thread.owner, what) && UnitData[what].group == s_int;
		}

		private static method Command_UnitRunGroup(CommandThread thread) {
			string command;
			CommandThread newThread;
			s_int = S2I(thread.args.next());
			command = thread.args.restParsed();
			s_thread = thread;

			newThread = CommandThread.create(thread.owner, CMDF_EXTEND);
			GroupEnumUnitsOfPlayer(newThread.selection.getGroup(), P(thread.owner), Filter(function thistype.Command_UnitRunGroup_filter));
			newThread.pushCommands(command);
			newThread.start.execute();
		}

		//! runtextmacro CommandHeader("Command_UnitKill")
		//! runtextmacro CommandStart("Command_UnitKill")
			KillUnit(what);
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitExplode")
		//! runtextmacro CommandStart("Command_UnitExplode")
			SetUnitExploded(what, true);
			KillUnit(what);
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitSize")
			s_real1 = S2R(thread.args.next()) / 100;
		//! runtextmacro CommandStart("Command_UnitSize")
			unitData.size = s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitSizeDelta")
			s_real1 = S2R(thread.args.next()) / 100;
		//! runtextmacro CommandStart("Command_UnitSizeDelta")
			unitData.size = unitData.size + s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitAngle")
			s_real1 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitAngle")
			unitData.angle = s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitAngleSpawner")
			s_real1 = GetUnitX(Spawner.get(thread.owner));
			s_real2 = GetUnitY(Spawner.get(thread.owner));

		//! runtextmacro CommandStart("Command_UnitAngleSpawner")
			unitData.angle = Rad2Deg(Atan2(s_real2 - unitData.y, s_real1 - unitData.x));
		//! runtextmacro CommandEnd()


		//! runtextmacro CommandHeader("Command_UnitAngleDelta")
			s_real1 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitAngleDelta")
			unitData.angle = unitData.angle + s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitAngleRandom")
		//! runtextmacro CommandStart("Command_UnitAngleRandom")
			unitData.angle = GetRandomReal(0, 360);
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitMoveX")
			s_real1 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitMoveX")
			unitData.x = unitData.x + s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitMoveY")
			s_real1 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitMoveY")
			unitData.y = unitData.y + s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitMoveXY")
			s_real1 = S2R(thread.args.next());
			s_real2 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitMoveXY")
			unitData.x = unitData.x + s_real1;
			unitData.y = unitData.y + s_real2;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitSetX")
			s_real1 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitSetX")
			unitData.x = s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitSetY")
			s_real1 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitSetY")
			unitData.y = s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitSetXY")
			s_real1 = S2R(thread.args.next());
			s_real2 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitSetXY")
			unitData.x = s_real1;
			unitData.y = s_real2;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitMoveDirection")
			real angle = Deg2Rad(S2R(thread.args.next()));
			real amount = S2R(thread.args.next());
			s_real1 = Cos(angle) * amount;
			s_real2 = Sin(angle) * amount;
		//! runtextmacro CommandStart("Command_UnitMoveDirection")
			unitData.x = unitData.x + s_real1;
			unitData.y = unitData.y + s_real2;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitTint")
			s_r = R2I(S2R(thread.args.next()) * 255 / 100);
			s_g = R2I(S2R(thread.args.next()) * 255 / 100);
			s_b = R2I(S2R(thread.args.next()) * 255 / 100);
			s_a = 255 - R2I(S2R(thread.args.next()) * 255 / 100);
		//! runtextmacro CommandStart("Command_UnitTint")
			unitData.setVertexColor(s_r, s_g, s_b, s_a);
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitColor")
			integer id = PlayerIdFromString(thread.args.restParsed());

			if (id >= 0)
				s_color = ConvertPlayerColor(id);
			else
				s_color = ConvertPlayerColor(15);
		//! runtextmacro CommandStart("Command_UnitColor")
			unitData.color = s_color;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitAnimSpeed")
			s_real1 = S2R(thread.args.restParsed()) / 100;
		//! runtextmacro CommandStart("Command_UnitAnimSpeed")
			unitData.animSpeed = s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitSpeed")
			s_real1 = S2R(thread.args.restParsed());
		//! runtextmacro CommandStart("Command_UnitSpeed")
			unitData.speed = s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitRemoveBuffs")
		//! runtextmacro CommandStart("Command_UnitRemoveBuffs")
			UnitRemoveBuffs(what, true, true);
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitRemoveCooldowns")
		//! runtextmacro CommandStart("Command_UnitRemoveCooldowns")
			UnitResetCooldown(what);
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitPlayAnim")
			s_string1 = thread.args.next();
			s_int = S2I(thread.args.next()) - 1;

			if (s_int < 0)
				s_int = 0;
		//! runtextmacro CommandStart("Command_UnitPlayAnim")
			unitData.setAnim(s_string1);
			unitData.queueAnimCount(s_string1, s_int);
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitQueueAnim")
			s_string1 = thread.args.next();
			s_int = S2I(thread.args.next()) - 1;

			if (s_int < 0)
				s_int = 0;
		//! runtextmacro CommandStart("Command_UnitQueueAnim")
			unitData.queueAnimCount(s_string1, s_int);
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_Tag")
			s_string1 = thread.args.next();
			s_bool = (thread.args.next() == "off");
		//! runtextmacro CommandStart("Command_Tag")
			AddUnitAnimationProperties(what, s_string1, !s_bool);
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitFly")
			s_real1 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitFly")
			unitData.z = s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitFlyDelta")
			s_real1 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitFlyDelta")
			unitData.z = unitData.z + s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitPath")
			string arg = thread.args.next();

			if (arg == "off") {
				s_bool = false;
			} else if (arg == "on") {
				s_bool = true;
			} else {
				return;
			}
		//! runtextmacro CommandStart("Command_UnitPath")
			SetUnitPathing(what, s_bool);
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitId")
		//! runtextmacro CommandStart("Command_UnitId")
			MessageTo(s_thread.owner, "ID: " + Id2String(unitData.id) + " (" + I2S(unitData.id) + ")");
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitLife")
			s_real1 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitLife")
			unitData.life = s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitMana")
			s_real1 = S2R(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitMana")
			unitData.mana = s_real1;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitGroup")
			s_int = S2I(thread.args.next());
		//! runtextmacro CommandStart("Command_UnitGroup")
			unitData.group = s_int;
		//! runtextmacro CommandEnd()

		//! runtextmacro CommandHeader("Command_UnitPause")
			string str = thread.args.next();
			if (str == "off") {
				s_bool = false;
			} else {
				s_bool = true;
			}
		//! runtextmacro CommandStart("Command_UnitPause")
			unitData.paused = s_bool;
		//! runtextmacro CommandEnd();

		//! runtextmacro CommandHeader("Command_UnitAttach")
			s_string1 = ConvertSlashes(thread.args.next());
			s_string2 = thread.args.next();
		//! runtextmacro CommandStart("Command_UnitAttach")
			AddSpecialEffectTarget(s_string1, what, s_string2);
		//! runtextmacro CommandEnd();

		private static method onInit_aliases() {
			Alias.saveall("rm", "remove");
			Alias.saveall("mv", "move");
			Alias.saveall("sz", "size");
			Alias.saveall("szd", "sized");

			Macro.saveall("'", "aa");
			Macro.saveall("@", "ar");

			Alias.saveall("aa", "ability add");
			Alias.saveall("ar", "ability remove");

			Alias.saveall("gl", "global");
			Alias.saveall("unpause", "pause off");

			Alias.saveall("nc", "path off");
			Alias.saveall("cn", "path on");
		}

		private static method onInit() {
			Command.register("remove",  thistype.Command_UnitRemove,          CMD_UNITPROP);
			Command.register("give",    thistype.Command_UnitGive,            CMD_UNITPROP);
			Command.register("givef",   thistype.Command_UnitGiveForce,       CMD_UNITPROP);
			Command.register("kill",    thistype.Command_UnitKill,            CMD_UNITPROP);
			Command.register("explode", thistype.Command_UnitExplode,         CMD_UNITPROP);
			Command.register("size",    thistype.Command_UnitSize,            CMD_UNITPROP);
			Command.register("sized",   thistype.Command_UnitSizeDelta,       CMD_UNITPROP);
			Command.register("fa",      thistype.Command_UnitAngle,           CMD_UNITPROP);
			Command.register("fd",      thistype.Command_UnitAngleDelta,      CMD_UNITPROP);
			Command.register("fr",      thistype.Command_UnitAngleRandom,     CMD_UNITPROP);
			Command.register("fs",      thistype.Command_UnitAngleSpawner,    CMD_UNITPROP);
			Command.register("movex",   thistype.Command_UnitMoveX,           CMD_UNITPROP);
			Command.register("movey",   thistype.Command_UnitMoveY,           CMD_UNITPROP);
			Command.register("move",    thistype.Command_UnitMoveXY,          CMD_UNITPROP);
			Command.register("posx",    thistype.Command_UnitSetX,            CMD_UNITPROP);
			Command.register("posy",    thistype.Command_UnitSetY,            CMD_UNITPROP);
			Command.register("pos",     thistype.Command_UnitSetXY,           CMD_UNITPROP);
			Command.register("movea",   thistype.Command_UnitMoveDirection,   CMD_UNITPROP);
			Command.register("tint",    thistype.Command_UnitTint,            CMD_UNITPROP);
			Command.register("color",   thistype.Command_UnitColor,           CMD_UNITPROP);
			Command.register("aspeed",  thistype.Command_UnitAnimSpeed,       CMD_UNITPROP);
			Command.register("speed",   thistype.Command_UnitSpeed,           CMD_UNITPROP);
			Command.register("buff",    thistype.Command_UnitRemoveBuffs,     CMD_UNITPROP);
			Command.register("cd",      thistype.Command_UnitRemoveCooldowns, CMD_UNITPROP);
			Command.register("play",    thistype.Command_UnitPlayAnim,        CMD_UNITPROP);
			Command.register("tag",     thistype.Command_Tag,                 CMD_UNITPROP);
			Command.register("playq",   thistype.Command_UnitQueueAnim,       CMD_UNITPROP);
			Command.register("fly",     thistype.Command_UnitFly,             CMD_UNITPROP);
			Command.register("flyd",    thistype.Command_UnitFlyDelta,        CMD_UNITPROP);
			Command.register("path",    thistype.Command_UnitPath,            CMD_UNITPROP);
			Command.register("life",    thistype.Command_UnitLife,            CMD_UNITPROP);
			Command.register("mana",    thistype.Command_UnitMana,            CMD_UNITPROP);
			Command.register("ability", thistype.Command_UnitAbility,         CMD_UNITPROP);
			Command.register("group",   thistype.Command_UnitGroup,           CMD_UNITPROP);
			Command.register("pause",   thistype.Command_UnitPause,           CMD_UNITPROP);
			Command.register("attach",  thistype.Command_UnitAttach,          CMD_UNITPROP);
			Command.register("step",    thistype.Command_UnitStep,            CMD_EXEC);
			Command.register("global",  thistype.Command_UnitGlobal,          CMD_EXEC);
			Command.register("grun",    thistype.Command_UnitRunGroup,        CMD_EXEC);
			Command.register("id",      thistype.Command_UnitId,              CMD_NONE);

			onInit_aliases.execute();
		}
	}
}