library Generic requires Core {
	struct Generic[] {
		private static method Command_Wait(CommandThread thread) {
			thread.postpone(S2R(thread.args.next()));
		}

		private static method Command_MakeAlias(CommandThread thread) {
			string alias = thread.args.next();
			string expansion = thread.args.restParsed();

			integer result = Alias.getAvailability(thread.owner, alias);

			if (result == ERR_NONE) {
				Alias.save(thread.owner, alias, expansion);
				MessageTo(thread.owner, "Successfully created alias [" + ColorStr(alias, GENERIC_HIGHLIGHT) + "]: " + ColorStr(expansion, GENERIC_HIGHLIGHT));
			} else if (result == ERR_ALIAS_CONFLICT_COMMAND) {
				MessageTo(thread.owner, "Couldn't create the alias! It conflicts with an existing command.");
			} else if (result == ERR_ALIAS_CONFLICT_ALIAS) {
				MessageTo(thread.owner, "Couldn't create the alias! It conflicts with an existing alias.");
			} else if (result == ERR_ALIAS_CONFLICT_MACRO) {
				MessageTo(thread.owner, "Couldn't create the alias! It conflicts with an existing macro.");
			} else if (result == ERR_ALIAS_ZERO_LENGTH) {
				MessageTo(thread.owner, "Couldn't create the alias! The alias must not be zero-length.");
			} else if (result == ERR_ALIAS_FORBIDDEN) {
				MessageTo(thread.owner, "Couldn't create the alias! It contains a forbidden character: -");
			}
		}

		private static method Command_MakeMacro(CommandThread thread) {
			string macro = thread.args.next();
			string expansion = thread.args.restParsed();

			integer result = Macro.getAvailability(thread.owner, macro);

			if (result == ERR_NONE) {
				Macro.save(thread.owner, macro, expansion);
				MessageTo(thread.owner, "Successfully created macro [" + ColorStr(macro, GENERIC_HIGHLIGHT) + "]: " + ColorStr(expansion, GENERIC_HIGHLIGHT));
			} else if (result == ERR_MACRO_CONFLICT_COMMAND) {
				MessageTo(thread.owner, "Couldn't create the macro! It conflicts with an existing command.");
			} else if (result == ERR_MACRO_CONFLICT_ALIAS) {
				MessageTo(thread.owner, "Couldn't create the macro! It conflicts with an existing alias.");
			} else if (result == ERR_MACRO_CONFLICT_MACRO) {
				MessageTo(thread.owner, "Couldn't create the macro! It conflicts with an existing macro.");
			} else if (result == ERR_MACRO_LIMIT_EXHAUSTED) {
				MessageTo(thread.owner, "Couldn't create the macro! You have reached the maximum limit of macros.");
			} else if (result == ERR_MACRO_ZERO_LENGTH) {
				MessageTo(thread.owner, "Couldn't create the macro! The macro must not be zero-length.");
			} else if (result == ERR_MACRO_FORBIDDEN) {
				MessageTo(thread.owner, "Couldn't create the macro! It contains a forbidden character: -");
			}
		}

		private static method Command_RemoveAlias(CommandThread thread) {
			string alias = thread.args.next();

			if (Alias.exists(thread.owner, alias)) {
				Alias.remove(thread.owner, alias);
				MessageTo(thread.owner, "Successfully removed alias [" + alias + "].");
			} else {
				MessageTo(thread.owner, "This alias does not exist!");
			}
		}

		private static method Command_RemoveMacro(CommandThread thread) {
			string macro = thread.args.next();

			if (Macro.exists(thread.owner, macro)) {
				Macro.remove(thread.owner, macro);
				MessageTo(thread.owner, "Successfully removed macro [" + macro + "].");
			} else {
				MessageTo(thread.owner, "This macro does not exist!");
			}
		}

		private static method Command_ThreadControl(CommandThread thread) {
			string cmd = thread.args.next();

			if (cmd == "stop") {
				thread.stop();
			} else if (cmd == "stopall") {
				CommandThread.stopAll(thread.owner);
			}
		}

		private static method Command_Repeat(CommandThread thread) {
			integer count = S2I(thread.args.next());
			string cmd = thread.args.restParsed();

			if (count > 0) {
				thread.pushCommands(cmd + "|repeat " + I2S(count - 1) + " " + cmd);
			}
		}

		private static method Command_Sequence(CommandThread thread) {
			integer count = S2I(thread.args.next());
			real delay = S2R(thread.args.next());
			string cmd = thread.args.restParsed();

			if (delay < 0) delay = 0.01;

			if (count > 0) {
				thread.pushCommands(cmd + "|" + "wait " + R2S(delay) + "|seq " + I2S(count - 1) + " " + R2S(delay) + " " + cmd);
			}
		}

		private static method Command_AutoCommand(CommandThread thread) {
			AutoCommands.setCommand(thread.owner, thread.args.restParsed());
		}

		private static method Command_AutoGroup(CommandThread thread) {
			AutoGroups.setGroup(thread.owner, S2I(thread.args.next()));
		}

		private static method Command_Roll(CommandThread thread) {
			string one = thread.args.next();
			string two = thread.args.next();

			integer tmp = 0;
			integer min = 1;
			integer max = 1;

			if (SL(two) == 0) {
				if (SL(one) == 0) {
					max = 20;
				} else {
					max = S2I(one);
				}

				if (max < 1) max = 1;
			} else {
				max = S2I(two);
				min = S2I(one);

				if (max < 1) max = 1;
				if (min < 1) min = 1;

				if (min > max) {
					tmp = max;
					max = min;
					min = tmp;
				}
			}

			Message(  PlayerName(thread.owner)
				    + " has rolled " 
				    + ColorStr(I2S(GetRandomInt(min, max)), GENERIC_HIGHLIGHT) 
				    + " in the range of [" 
				    + ColorStr(I2S(min), GENERIC_HIGHLIGHT) 
				    + ", " 
				    + ColorStr(I2S(max), GENERIC_HIGHLIGHT) 
				    + "].");
		}

		private static method Command_Time(CommandThread thread) {
			string arg = thread.args.next();

			if (arg == "noon" || arg == "day") {
				SetTimeOfDay(12);
			} else if (arg == "evening" || arg == "dusk") {
				SetTimeOfDay(18);
			} else if (arg == "morning" || arg == "dawn") {
				SetTimeOfDay(6);
			} else if (arg == "midnight" || arg == "night") {
				SetTimeOfDay(0);
			} else if (arg == "lock") {
				SuspendTimeOfDay(true);
			} else if (arg == "unlock") {
				SuspendTimeOfDay(false);
			} else {
				SetTimeOfDay(S2R(arg));
			}
		}

		private static method Command_Alliance(CommandThread thread) {
			string arg = thread.args.next();
			integer target = PlayerIdFromString(thread.args.next());
			boolean state = false;
			alliancetype allianceType;

			if (target >= 0) {
				if (arg == "ally") {
					state = true;
					allianceType = ALLIANCE_PASSIVE;
				} else if (arg == "vision") {
					state = true;
					allianceType = ALLIANCE_SHARED_VISION;
				} else if (arg == "unally") {
					state = false;
					allianceType = ALLIANCE_PASSIVE;
				} else if (arg == "unvision") {
					state = false;
					allianceType = ALLIANCE_SHARED_VISION;
				} else {
					return;
				}

				SetPlayerAlliance(P(thread.owner), P(target), allianceType, state);
			}

			allianceType = null;
		}

		private static method onInit_aliases() {
			Alias.saveall("unally", "alliance unally");
			Alias.saveall("ally", "alliance ally");
			Alias.saveall("vision", "alliance vision");
			Alias.saveall("unvision", "alliance unvision");
			Alias.saveall("autocmd", "autocommand");
			Alias.saveall("autogrp", "autogroup");
		}

		private static method onInit() {
			Command.register("alias",       thistype.Command_MakeAlias,     CMD_DIRECT);
			Command.register("macro",       thistype.Command_MakeMacro,     CMD_DIRECT);
			Command.register("unalias",     thistype.Command_RemoveAlias,   CMD_DIRECT);
			Command.register("unmacro",     thistype.Command_RemoveMacro,   CMD_DIRECT);
			Command.register("thread",      thistype.Command_ThreadControl, CMD_DIRECT);
			Command.register("autocommand", thistype.Command_AutoCommand,   CMD_DIRECT);
			Command.register("autogroup",   thistype.Command_AutoGroup,     CMD_DIRECT);
			Command.register("roll",        thistype.Command_Roll,          CMD_DIRECT);
			Command.register("time",        thistype.Command_Time,          CMD_DIRECT);
			Command.register("alliance",    thistype.Command_Alliance,      CMD_DIRECT);
			Command.register("wait",        thistype.Command_Wait,          CMD_NONE);
			Command.register("repeat",      thistype.Command_Repeat,        CMD_EXEC);
			Command.register("seq",         thistype.Command_Sequence,      CMD_EXEC);

			onInit_aliases.execute();
		}
	}
}