library Spawn requires Core {
	struct Spawn[] {
		private static real s_ox;
		private static real s_oy;
		private static real s_sx;
		private static real s_sy;
		private static CommandThread s_thread;

		private static method Command_Spawn(CommandThread thread) {
			string arg1 = thread.args.next();
			string arg2 = thread.args.next();
			integer count;
			integer unitId;
			integer i;
			unit spawner = Spawner.get(thread.owner);
			unit spawned;
			real x;
			real y;

			if (spawner == null) return;

			if (StringLength(arg2) == 0) {
				arg2 = arg1;
				arg1 = "1";
			}

			count = S2I(arg1);

			if (count < 1)
				count = 1;

			if (SubString(arg2, 0, 1) == "_") {
				arg2 = SubString(arg2, 1, 5);

				if (StringLength(arg2) == 4)
					unitId = String2Id(arg2);
				else {
					spawner = null;
					return;
				}
			} else
				unitId = UnitId(arg2);

			if (!(IsIdUtility(unitId) || StringLength(UnitId2String(unitId)) == 0)) {
				x = GetUnitX(spawner);
				y = GetUnitY(spawner);

				for (0 <= i < count) {
					spawned = CreateUnit(P(thread.owner), unitId, x, y, 270);
					SetUnitX(spawned, x);
					SetUnitY(spawned, y);
				}

				spawned = null;
			}
			
			spawner = null;
		}

		private static method Command_Clone_aux() {
			unit what = GetEnumUnit();
			unit clone;
			real x = GetUnitX(what);
			real y = GetUnitY(what);
			UnitData originalData;
			UnitData cloneData;

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				originalData = UnitData[what];
				clone = CreateUnit(P(s_thread.owner), GetUnitTypeId(what), 0, 0, originalData.angle);
				cloneData = UnitData[clone];

				cloneData.x         = s_sx + (x - s_ox);
				cloneData.y         = s_sy + (y - s_oy);
				cloneData.life      = originalData.life;
				cloneData.mana      = originalData.mana;
				cloneData.speed     = originalData.speed;
				cloneData.size      = originalData.size;
				cloneData.animSpeed = originalData.animSpeed;
				cloneData.color     = originalData.color;
				cloneData.z         = originalData.z;
				cloneData.setVertexColor(originalData.vertexR, originalData.vertexG, originalData.vertexB, originalData.vertexA);
			}
		}

		private static method Command_Clone(CommandThread thread) {
			unit spawner = Spawner.get(thread.owner);

			if (spawner == null) return;

			thread.selection.calcOrigin();

			s_ox = thread.selection.getOriginX();
			s_oy = thread.selection.getOriginY();	
			s_sx = GetUnitX(spawner);
			s_sy = GetUnitY(spawner);
			s_thread = thread;

			thread.selection.run(function thistype.Command_Clone_aux);	
		}

		private static method onInit() {
			Command.register("spawn", thistype.Command_Spawn);
			Command.register("clone", thistype.Command_Clone);
		}
	}



}