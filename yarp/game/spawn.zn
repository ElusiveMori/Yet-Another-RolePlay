library Spawn requires Core {
	struct Spawn[] {
		private static real s_ox;
		private static real s_oy;
		private static real s_sx;
		private static real s_sy;
		private static integer s_int;
		private static CommandThread s_thread;

		private static method Command_Spawn(CommandThread thread) {
			string arg1 = thread.args.next();
			string arg2 = thread.args.next();
			integer count;
			integer unitId;
			integer i;
			unit spawner = Spawner.get(thread.owner);
			unit spawned;
			real x;
			real y;

			if (spawner == null) return;

			if (SL(arg2) == 0) {
				arg2 = arg1;
				arg1 = "1";
			}

			count = S2I(arg1);

			if (count < 1)
				count = 1;

			if (IdManifest.hasString(arg2)) {
				unitId = IdManifest.getByString(arg2);
			} else if (Sub(arg2, 0, 1) == "_") {
				arg2 = Sub(arg2, 1, 5);

				if (SL(arg2) == 4)
					unitId = String2Id(arg2);
				else {
					spawner = null;
					return;
				}
			} else
				unitId = UnitId(arg2);

			if (!(IsIdUtility(unitId) || SL(UnitId2String(unitId)) == 0)) {
				x = GetUnitX(spawner);
				y = GetUnitY(spawner);

				for (0 <= i < count) {
					if (Limits.canPlayerSpawn(thread.owner)) {
						spawned = CreateUnit(P(thread.owner), unitId, x, y, 270);
						SetUnitX(spawned, x);
						SetUnitY(spawned, y);
						Limits.onPlayerSpawn(thread.owner);
					} else {
						break;
					}
				}

				spawned = null;
			}
			
			spawner = null;
		}

		private static method Command_Clone_aux() {
			unit what = GetEnumUnit();
			unit clone;
			real x = GetUnitX(what);
			real y = GetUnitY(what);
			integer i;
			UnitData originalData;
			UnitData cloneData;

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				for (0 <= i < s_int) {
					if (Limits.canPlayerSpawn(s_thread.owner)) {
						originalData = UnitData[what];
						clone = originalData.clone(s_thread.owner);
						cloneData = UnitData[clone];
						cloneData.x = (x - s_ox) + s_sx;
						cloneData.y = (y - s_oy) + s_sy;

						Limits.onPlayerSpawn(s_thread.owner);
					}
				}
			}
		}

		private static method Command_Clone(CommandThread thread) {
			unit spawner = Spawner.get(thread.owner);
			s_int = S2I(thread.args.next());
			if (spawner == null) return;

			thread.selection.calcOrigin();

			s_ox = thread.selection.getOriginX();
			s_oy = thread.selection.getOriginY();	
			s_sx = GetUnitX(spawner);
			s_sy = GetUnitY(spawner);
			s_thread = thread;

			thread.selection.run(function thistype.Command_Clone_aux);	
		}

		private static method Command_Stack_aux() {
			unit what = GetEnumUnit();
			unit clone;
			integer i;
			real x = GetUnitX(what);
			real y = GetUnitY(what);
			UnitData originalData;
			UnitData cloneData;

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				for (0 <= i < s_int) {
					if (Limits.canPlayerSpawn(s_thread.owner)) {
						originalData = UnitData[what];
						clone = originalData.clone(s_thread.owner);
						cloneData = UnitData[clone];
						cloneData.x = x;
						cloneData.y = y;

						Limits.onPlayerSpawn(s_thread.owner);
					}
				}
			}
		}

		private static method Command_Stack(CommandThread thread) {
			unit spawner = Spawner.get(thread.owner);
			s_int = S2I(thread.args.next());

			if (spawner == null) return;

			s_thread = thread;

			thread.selection.run(function thistype.Command_Stack_aux);	
		}


		private static method onInit() {
			Command.register("spawn", thistype.Command_Spawn, CMD_SPAWNING);
			Command.register("clone", thistype.Command_Clone, CMD_SPAWNING);
			Command.register("stack", thistype.Command_Stack, CMD_SPAWNING);
		}
	}



}