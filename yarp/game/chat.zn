library Chat requires Core {
	struct Chat[] {
		private static method Command_Log(CommandThread thread) {
			string command = thread.args.next();

			if (command == "ooc") {
				LogBoard.setActiveLogType(thread.owner, TYPE_OOC);
				LogBoard.setLogScroll(thread.owner, 0);
			} else if (command == "ic") {
				LogBoard.setActiveLogType(thread.owner, TYPE_IC);
				LogBoard.setLogScroll(thread.owner, 0);
			} else if (command == "cmd") {
				LogBoard.setActiveLogType(thread.owner, TYPE_CMD);
				LogBoard.setLogScroll(thread.owner, 0);
			} else if (command == "scroll") {
				LogBoard.setLogScroll(thread.owner, S2I(thread.args.next()));
			} else if (command == "hide") {
				LogBoard.setActiveLogType(thread.owner, -1);
			}
		}

		private static method Command_IC(CommandThread thread) {
			MessageIC(thread.owner, thread.args.next(), StringTrim(thread.args.restSimple()));
		}

		private static method Command_OOC(CommandThread thread) {
			MessageOOC(thread.owner, StringTrim(thread.args.restSimple()));
		}

		private static method Command_SetName(CommandThread thread) {
			string macro = thread.args.next();
			string expansion = "ic [" + thread.args.restSimple() + "]";

			if (Macro.exists(thread.owner, macro)) {
				Macro.remove(thread.owner, macro);
			}

			integer result = Macro.getAvailability(thread.owner, macro);

			if (result == ERR_NONE) {
				Macro.save(thread.owner, macro, expansion);
				MessageTo(thread.owner, "Successfully created macro [" + ColorStr(macro, GENERIC_HIGHLIGHT) + "]: " + ColorStr(expansion, GENERIC_HIGHLIGHT));
			} else if (result == ERR_MACRO_CONFLICT_COMMAND) {
				MessageTo(thread.owner, "Couldn't create the macro! It conflicts with an existing command.");
			} else if (result == ERR_MACRO_CONFLICT_ALIAS) {
				MessageTo(thread.owner, "Couldn't create the macro! It conflicts with an existing alias.");
			} else if (result == ERR_MACRO_CONFLICT_MACRO) {
				MessageTo(thread.owner, "Couldn't create the macro! It conflicts with an existing macro.");
			} else if (result == ERR_MACRO_LIMIT_EXHAUSTED) {
				MessageTo(thread.owner, "Couldn't create the macro! You have reached the maximum limit of macros.");
			} else if (result == ERR_MACRO_ZERO_LENGTH) {
				MessageTo(thread.owner, "Couldn't create the macro! The macro must not be zero-length.");
			} else if (result == ERR_MACRO_FORBIDDEN) {
				MessageTo(thread.owner, "Couldn't create the macro! It contains a forbidden character: -");
			}
		}

		private static method Command_SetUnitName(CommandThread thread) {
			UnitList list = thread.selection.top;

			while (list > 0) {
				if (HasPlayerUnitAccess(thread.owner, list.what)) {
					UnitData[list.what].name = thread.args.restSimple();
				}

				list = list.next;
			}
		}

		private static method Command_Say(CommandThread thread) {
			UnitList list = thread.selection.top;

			while (list > 0) {
				if (HasPlayerUnitAccess(thread.owner, list.what)) {
					MessageIC(thread.owner, UnitData[list.what].name, thread.args.restSimple());
				}

				list = list.next;
			}
		}

		private static method onInit() {
			Command.register("log",         thistype.Command_Log);
			Command.register("ic",          thistype.Command_IC);
			Command.register("ooc",         thistype.Command_OOC);
			Command.register("say",         thistype.Command_Say);
			Command.register("setname",     thistype.Command_SetName);
			Command.register("setunitname", thistype.Command_SetUnitName);

			Macro.saveall(".", "ooc");
			Macro.saveall(";", "say");
		}
	}
	
}