library Chat requires Core {
	struct Chat[] {
		private static CommandThread s_thread;
		private static string s_string;

		private static method Command_Log(CommandThread thread) {
			string command = thread.args.next();

			if (command == "ooc") {
				LogBoard.setActiveLogType(thread.owner, TYPE_OOC);
				LogBoard.setLogScroll(thread.owner, 0);
			} else if (command == "ic") {
				LogBoard.setActiveLogType(thread.owner, TYPE_IC);
				LogBoard.setLogScroll(thread.owner, 0);
			} else if (command == "cmd") {
				LogBoard.setActiveLogType(thread.owner, TYPE_CMD);
				LogBoard.setLogScroll(thread.owner, 0);
			} else if (command == "scroll") {
				LogBoard.setLogScroll(thread.owner, S2I(thread.args.next()));
			} else if (command == "hide") {
				LogBoard.setActiveLogType(thread.owner, -1);
			}
		}

		private static method Command_IC(CommandThread thread) {
			MessageIC(thread.owner, thread.args.next(), StringTrim(thread.args.restSimple()));
		}

		private static method Command_OOC(CommandThread thread) {
			MessageOOC(thread.owner, StringTrim(thread.args.restSimple()));
		}

		private static method Command_SetName(CommandThread thread) {
			string macro = thread.args.next();
			string expansion = "ic [" + thread.args.restSimple() + "]";
			integer result;

			if (Macro.exists(thread.owner, macro)) {
				Macro.remove(thread.owner, macro);
			}

			thread.pushCommands("macro [" + macro + "] " + expansion);
		}

		private static method Command_SetUnitName_aux() {
			unit what = GetEnumUnit();

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				UnitData[what].name = s_string;
			}
		}

		private static method Command_SetUnitName(CommandThread thread) {
			s_thread = thread;
			s_string = thread.args.restSimple();

			thread.selection.run(function thistype.Command_SetUnitName_aux);
		}

		private static method Command_Say_aux() {
			unit what = GetEnumUnit();

			if (HasPlayerUnitAccess(s_thread.owner, what)) {
				MessageIC(s_thread.owner, UnitData[what].name, s_string);
			}
		}

		private static method Command_Say(CommandThread thread) {
			s_thread = thread;
			s_string = thread.args.restSimple();

			thread.selection.run(function thistype.Command_Say_aux);
		}

		private static method Command_Clear(CommandThread thread) {
			if (IsLocalPlayer(thread.owner)) {
				ClearTextMessages();
			}
		}

		private static method onInit() {
			Command.register("log",         thistype.Command_Log,         CMD_DIRECT);
			Command.register("ic",          thistype.Command_IC,          CMD_DIRECT);
			Command.register("ooc",         thistype.Command_OOC,         CMD_DIRECT);
			Command.register("say",         thistype.Command_Say,         CMD_DIRECT);
			Command.register("setname",     thistype.Command_SetName,     CMD_DIRECT);
			Command.register("setunitname", thistype.Command_SetUnitName, CMD_UNITPROP);
			Command.register("clear",       thistype.Command_Clear,       CMD_NONE);

			Macro.saveall(".", "ooc");
			Macro.saveall(";", "say");
		}
	}
	
}