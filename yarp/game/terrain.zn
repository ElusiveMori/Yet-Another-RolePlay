library Terrain requires Core {
	constant integer TERRAIN_SAMPLE  = 'pA0c';
	constant integer TERRAIN_CIRCLE1 = 'pA0d';
	constant integer TERRAIN_CIRCLE2 = 'pA0e';
	constant integer TERRAIN_CIRCLE3 = 'pA0f';
	constant integer TERRAIN_CIRCLE4 = 'pA0g';
	constant integer TERRAIN_SQUARE1 = 'pA0h';
	constant integer TERRAIN_SQUARE2 = 'pA0i';
	constant integer TERRAIN_SQUARE3 = 'pA0j';
	constant integer TERRAIN_SQUARE4 = 'pA0k';

	constant integer HEIGHT_RAISEPOINT    = 'pA0m';
	constant integer HEIGHT_LOWERPOINT    = 'pA0n';
	constant integer HEIGHT_RAISECIRCLE1  = 'pA0o';
	constant integer HEIGHT_LOWERCIRCLE1  = 'pA0p';
	constant integer HEIGHT_RAISECIRCLE2  = 'pA0q';
	constant integer HEIGHT_LOWERCIRCLE2  = 'pA0r';
	constant integer HEIGHT_RAISECIRCLE3  = 'pA0s';
	constant integer HEIGHT_LOWERCIRCLE3  = 'pA0t';
	constant integer HEIGHT_removeDeformsRadius = 'pA0u';

	struct Terrain[] {
		static integer sampled[];
		static real heights[];

		static integer count;
		static integer removeWho;
		static real removeX;
		static real removeY;
		static real removeDx;
		static real removeDy;
		static real removeDist;
		static DeformationList removeCur;

		private static method removeDeformsRadius() {
			count = 0;

			while (removeCur > 0 && count < 256) {
				if (removeCur.owner == removeWho) {
					removeDx = (removeCur.x - removeX);
					removeDy = (removeCur.y - removeY);
					removeDist = (removeDx * removeDx) + (removeDy * removeDy);

					if (removeDist < 65536) {
						removeCur.destroy();
					}
				}
	

				removeCur = removeCur.next;
				count = count + 1;
			}

			if (removeCur > 0) {
				removeDeformsRadius.execute();
			}
		}

		private static method removeDeformsPlayer() {
			count = 0;

			while (removeCur > 0 && count < 512) {
				if (removeCur.owner == removeWho) {
					removeCur.destroy();
				}

				removeCur = removeCur.next;
				count = count + 1;
			}

			if (removeCur > 0) {
				removeDeformsPlayer.execute();
			}
		}

		private static method onCast() {
			integer spellId = GetSpellAbilityId();
			unit caster = GetTriggerUnit();
			integer owner = PID(GetOwningPlayer(caster));
			real x, y;

			if (Spawner.isSpawner(caster)) {
				x = GetSpellTargetX();
				y = GetSpellTargetY();

				if (spellId == TERRAIN_SAMPLE) {
					sampled[owner] = GetTerrainType(x, y);
				}

				if (sampled[owner] > 0) {
					if (spellId == TERRAIN_CIRCLE1) {
						SetTerrainType(x, y, sampled[owner], -1, 1, 0);
					} else if (spellId == TERRAIN_CIRCLE2) {
						SetTerrainType(x, y, sampled[owner], -1, 2, 0);
					} else if (spellId == TERRAIN_CIRCLE3) {
						SetTerrainType(x, y, sampled[owner], -1, 3, 0);
					} else if (spellId == TERRAIN_CIRCLE4) {
						SetTerrainType(x, y, sampled[owner], -1, 4, 0);
					} else if (spellId == TERRAIN_SQUARE1) {
						SetTerrainType(x, y, sampled[owner], -1, 1, 1);
					} else if (spellId == TERRAIN_SQUARE2) {
						SetTerrainType(x, y, sampled[owner], -1, 2, 1);
					} else if (spellId == TERRAIN_SQUARE3) {
						SetTerrainType(x, y, sampled[owner], -1, 3, 1);
					} else if (spellId == TERRAIN_SQUARE4) {
						SetTerrainType(x, y, sampled[owner], -1, 4, 1);
					}
				}

				if (spellId == HEIGHT_RAISEPOINT) {
					DeformationList.create(owner, x, y, heights[owner], 4);
				} else if (spellId == HEIGHT_RAISECIRCLE1) {
					DeformationList.create(owner, x, y, heights[owner], 256);
				} else if (spellId == HEIGHT_RAISECIRCLE2) {
					DeformationList.create(owner, x, y, heights[owner], 512);
				} else if (spellId == HEIGHT_RAISECIRCLE3) {
					DeformationList.create(owner, x, y, heights[owner], 768);
				} else if (spellId == HEIGHT_LOWERPOINT) {
					DeformationList.create(owner, x, y, -heights[owner], 4);
				} else if (spellId == HEIGHT_LOWERCIRCLE1) {
					DeformationList.create(owner, x, y, -heights[owner], 256);
				} else if (spellId == HEIGHT_LOWERCIRCLE2) {
					DeformationList.create(owner, x, y, -heights[owner], 512);
				} else if (spellId == HEIGHT_LOWERCIRCLE3) {
					DeformationList.create(owner, x, y, -heights[owner], 768);
				} else if (spellId == HEIGHT_removeDeformsRadius) {
					removeWho = owner;
					removeX = x;
					removeY = y;
					removeCur = DeformationList.top;

					removeDeformsRadius.execute();
				}
			}
		}

	//	private static method Command_Terrain(CommandThread thread) {
	//
	//	}

		private static method Command_Height(CommandThread thread) {
			heights[thread.owner] = S2R(thread.args.next());
		}

		private static method Command_RemoveDeforms(CommandThread thread) {
			string who = thread.args.next();
			integer target;

			if (SL(who) == 0) {
				target = thread.owner;
			} else {
				target = PlayerIdFromString(who);

				if (target == -1)
					return;
			}

			if ((target != thread.owner) && (GetPlayerAccessLevel(target) >= GetPlayerAccessLevel(thread.owner))) {
				return;
			}

			removeWho = target;
			removeCur = DeformationList.top;

			removeDeformsPlayer.execute();
		}

		private static method Command_Terrain(CommandThread thread) {
			sampled[thread.owner] = String2Id(thread.args.next());
		}

		private static method onInit() {
			trigger castTrigger = CreateTrigger();
			TriggerAddAction(castTrigger, function thistype.onCast);
			TriggerRegisterAnyUnitEventBJ(castTrigger, EVENT_PLAYER_UNIT_SPELL_CAST);
			castTrigger = null;

			Command.register("height",        thistype.Command_Height);
			Command.register("removedeforms", thistype.Command_RemoveDeforms);
			Command.register("terrain",       thistype.Command_Terrain);
		}
	}
}