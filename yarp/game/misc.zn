library Misc requires Core {
	struct Misc[] {
		private static method onPurchase() {
			unit sold = GetSoldUnit();
			integer who = PID(GetOwningPlayer(sold));
			unit spawner = Spawner.get(who);

			if (GetOctet(GetUnitTypeId(GetSellingUnit()), 3) == 112) {
				SetUnitX(sold, GetUnitX(spawner));
				SetUnitY(sold, GetUnitY(spawner));
			}

			if (!Limits.canPlayerSpawn(who)) {
				RemoveUnit(sold);
			}

			Limits.onPlayerSpawn(who);

			sold = null;
			spawner = null;
		}

		private static method onLeave() {
			integer who = PID(GetTriggerPlayer());
			unit spawner = Spawner.get(who);
			RemoveUnit(spawner);
			Message("Player " + PlayerName(who) + " has left the game.");
		}

		private static method transferShop() -> boolean {
			unit filtered = GetFilterUnit();
			integer id = GetUnitTypeId(filtered);

			if (GetOctet(id, 3) == 112 && GetOctet(id, 2) == 83) {
				SetUnitOwner(filtered, Player(bj_PLAYER_NEUTRAL_EXTRA), true);
				SetUnitColor(filtered, GetPlayerColor(Player(bj_PLAYER_NEUTRAL_EXTRA)));
				SetUnitTimeScale(filtered, 0.1);
			}

			filtered = null;
			return false;
		}

		private static method initSandbox() {
			rect sandbox = Areas.sandbox();
			real minx = GetRectMinX(sandbox);
			real miny = GetRectMinY(sandbox);
			real maxx = GetRectMaxX(sandbox);
			real maxy = GetRectMaxY(sandbox);
			real x = minx;
			real y = miny;

			while (x < maxx) {
				while (y < maxy) {
					SetTerrainType(x, y, 'Oaby', -1, 4, 1);
					y = y + 512;
				}

				y = miny;
				x = x + 512;
			}

			sandbox = null;
		}

		private static method onInit() {
			trigger purchaseTrigger = CreateTrigger();
			trigger leaveTrigger = CreateTrigger();
			integer i;
			integer j;
			group temp = NewGroup();
			TriggerRegisterAnyUnitEventBJ(purchaseTrigger, EVENT_PLAYER_UNIT_SELL);
			TriggerAddAction(purchaseTrigger, function thistype.onPurchase);

			for (0 <= i < bj_MAX_PLAYERS) {
				SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), Player(i), bj_ALLIANCE_ALLIED_ADVUNITS);
				TriggerRegisterPlayerEvent(leaveTrigger, Player(i), EVENT_PLAYER_LEAVE);

				for (0 <= j < bj_MAX_PLAYERS) {
					SetPlayerAllianceStateBJ(Player(i), Player(j), bj_ALLIANCE_ALLIED);
				}
			}

			TriggerAddAction(leaveTrigger, function thistype.onLeave);		
			GroupEnumUnitsInRect(temp, GetWorldBounds(), Condition(function thistype.transferShop));

			SetCameraBounds(WorldBounds.minX,
						    WorldBounds.minY, 
						    WorldBounds.maxX, 
						    WorldBounds.maxY, 
						    WorldBounds.minX, 
						    WorldBounds.maxY, 
						    WorldBounds.maxX, 
						    WorldBounds.minY);
			SetCameraPosition(WorldBounds.centerX, WorldBounds.centerY);
			FogEnable(false);
			FogMaskEnable(false);
			SetTimeOfDayScale(0.25);

			initSandbox.execute();

			purchaseTrigger = null;
			leaveTrigger = null;
			ReleaseGroup(temp);
			temp = null;
		}
	}
}